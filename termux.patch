diff --git a/Lib/aifc.py b/Lib/aifc.py
index 5254987..226fe59 100644
--- a/Lib/aifc.py
+++ b/Lib/aifc.py
@@ -961,7 +961,7 @@ def open(f, mode=None):
 if __name__ == '__main__':
     import sys
     if not sys.argv[1:]:
-        sys.argv.append('/usr/demos/data/audio/bach.aiff')
+        sys.argv.append('/data/data/com.termux/files/usr/demos/data/audio/bach.aiff')
     fn = sys.argv[1]
     with open(fn, 'r') as f:
         print("Reading", fn)
diff --git a/Lib/ctypes/util.py b/Lib/ctypes/util.py
index 0c2510e..e3d5993 100644
--- a/Lib/ctypes/util.py
+++ b/Lib/ctypes/util.py
@@ -172,7 +172,7 @@ elif os.name == "posix":
             # assuming GNU binutils / ELF
             if not f:
                 return None
-            objdump = shutil.which('objdump')
+            objdump = shutil.which('llvm-objdump')
             if not objdump:
                 # objdump is not available, give up
                 return None
@@ -209,7 +209,7 @@ elif os.name == "posix":
             expr = os.fsencode(expr)
 
             try:
-                proc = subprocess.Popen(('/sbin/ldconfig', '-r'),
+                proc = subprocess.Popen(('/data/data/com.termux/files/usr/bin/ldconfig', '-r'),
                                         stdout=subprocess.PIPE,
                                         stderr=subprocess.DEVNULL)
             except OSError:  # E.g. command not found
@@ -300,7 +300,7 @@ elif os.name == "posix":
         def _findLib_ld(name):
             # See issue #9998 for why this is needed
             expr = r'[^\(\)\s]*lib%s\.[^\(\)\s]*' % re.escape(name)
-            cmd = ['ld', '-t']
+            cmd = ['ld.lld', '-t']
             libpath = os.environ.get('LD_LIBRARY_PATH')
             if libpath:
                 for d in libpath.split(':'):
diff --git a/Lib/http/server.py b/Lib/http/server.py
index ca6240d..b4f3b97 100644
--- a/Lib/http/server.py
+++ b/Lib/http/server.py
@@ -1183,10 +1183,6 @@ class CGIHTTPRequestHandler(SimpleHTTPRequestHandler):
                 return
             # Child
             try:
-                try:
-                    os.setuid(nobody)
-                except OSError:
-                    pass
                 os.dup2(self.rfile.fileno(), 0)
                 os.dup2(self.wfile.fileno(), 1)
                 os.execve(scriptfile, args, env)
diff --git a/Lib/mailcap.py b/Lib/mailcap.py
index 2f4656e..0db23c2 100644
--- a/Lib/mailcap.py
+++ b/Lib/mailcap.py
@@ -67,7 +67,8 @@ def listmailcapfiles():
             # Don't bother with getpwuid()
             home = '.' # Last resort
         mailcaps = [home + '/.mailcap', '/etc/mailcap',
-                '/usr/etc/mailcap', '/usr/local/etc/mailcap']
+                '/usr/etc/mailcap', '/usr/local/etc/mailcap',
+                '/data/data/com.termux/files/usr/etc/mailcap']
     return mailcaps
 
 
diff --git a/Lib/mimetypes.py b/Lib/mimetypes.py
index 37228de..6bdf5dc 100644
--- a/Lib/mimetypes.py
+++ b/Lib/mimetypes.py
@@ -55,6 +55,7 @@ knownfiles = [
     "/usr/local/lib/netscape/mime.types",
     "/usr/local/etc/httpd/conf/mime.types",     # Apache 1.2
     "/usr/local/etc/mime.types",                # Apache 1.3
+    "/data/data/com.termux/files/usr/etc/mime.types",           # Termux
     ]
 
 inited = False
diff --git a/Lib/multiprocessing/heap.py b/Lib/multiprocessing/heap.py
index 6217dfe..3015d1f 100644
--- a/Lib/multiprocessing/heap.py
+++ b/Lib/multiprocessing/heap.py
@@ -70,7 +70,7 @@ else:
         """
 
         if sys.platform == 'linux':
-            _dir_candidates = ['/dev/shm']
+            _dir_candidates = []
         else:
             _dir_candidates = []
 
diff --git a/Lib/posixpath.py b/Lib/posixpath.py
index e4f155e..f437b7f 100644
--- a/Lib/posixpath.py
+++ b/Lib/posixpath.py
@@ -18,7 +18,7 @@ pardir = '..'
 extsep = '.'
 sep = '/'
 pathsep = ':'
-defpath = '/bin:/usr/bin'
+defpath = '/data/data/com.termux/files/usr/bin'
 altsep = None
 devnull = '/dev/null'
 
diff --git a/Lib/subprocess.py b/Lib/subprocess.py
index 6df5dd5..d7ef1e2 100644
--- a/Lib/subprocess.py
+++ b/Lib/subprocess.py
@@ -1808,9 +1808,7 @@ class Popen:
                 args = list(args)
 
             if shell:
-                # On Android the default shell is at '/system/bin/sh'.
-                unix_shell = ('/system/bin/sh' if
-                          hasattr(sys, 'getandroidapilevel') else '/bin/sh')
+                unix_shell = ('/data/data/com.termux/files/usr/bin/sh')
                 args = [unix_shell, "-c"] + args
                 if executable:
                     args[0] = executable
diff --git a/Lib/tempfile.py b/Lib/tempfile.py
index 2b4f431..88b5d1d 100644
--- a/Lib/tempfile.py
+++ b/Lib/tempfile.py
@@ -170,7 +170,7 @@ def _candidate_tempdir_list():
                          _os.path.expandvars(r'%SYSTEMROOT%\Temp'),
                          r'c:\temp', r'c:\tmp', r'\temp', r'\tmp' ])
     else:
-        dirlist.extend([ '/tmp', '/var/tmp', '/usr/tmp' ])
+        dirlist.extend([ '/data/data/com.termux/files/usr/tmp' ])
 
     # As a last resort, the current directory.
     try:
diff --git a/Lib/uuid.py b/Lib/uuid.py
index 470bc0d..8969f6e 100644
--- a/Lib/uuid.py
+++ b/Lib/uuid.py
@@ -362,7 +362,6 @@ def _get_command_stdout(command, *args):
 
     try:
         path_dirs = os.environ.get('PATH', os.defpath).split(os.pathsep)
-        path_dirs.extend(['/sbin', '/usr/sbin'])
         executable = shutil.which(command, path=os.pathsep.join(path_dirs))
         if executable is None:
             return None
diff --git a/Modules/_cursesmodule.c b/Modules/_cursesmodule.c
index 743b9e3..1ca1072 100644
--- a/Modules/_cursesmodule.c
+++ b/Modules/_cursesmodule.c
@@ -126,7 +126,7 @@ static const char PyCursesVersion[] = "2.2";
 #undef columns
 #endif
 
-#ifdef HAVE_LANGINFO_H
+#if defined(HAVE_LANGINFO_H) && !defined(__ANDROID__)
 #include <langinfo.h>
 #endif
 
diff --git a/Modules/_multiprocessing/multiprocessing.c b/Modules/_multiprocessing/multiprocessing.c
index 8f9daa5..be8406c 100644
--- a/Modules/_multiprocessing/multiprocessing.c
+++ b/Modules/_multiprocessing/multiprocessing.c
@@ -180,7 +180,7 @@ static PyMethodDef module_methods[] = {
     _MULTIPROCESSING_RECV_METHODDEF
     _MULTIPROCESSING_SEND_METHODDEF
 #endif
-#if !defined(POSIX_SEMAPHORES_NOT_ENABLED) && !defined(__ANDROID__)
+#if !defined(POSIX_SEMAPHORES_NOT_ENABLED)
     _MULTIPROCESSING_SEM_UNLINK_METHODDEF
 #endif
     {NULL}
diff --git a/Modules/_multiprocessing/posixshmem.c b/Modules/_multiprocessing/posixshmem.c
index 88c93fe..c9b19ab 100644
--- a/Modules/_multiprocessing/posixshmem.c
+++ b/Modules/_multiprocessing/posixshmem.c
@@ -11,6 +11,72 @@ posixshmem - A Python extension that provides shm_open() and shm_unlink()
 #include <sys/mman.h>
 #endif
 
+#ifdef __ANDROID__
+#include <alloca.h>
+#include <fcntl.h>
+#include <stdlib.h>
+#include <string.h>
+#include <unistd.h>
+static int shm_unlink(const char *name) {
+    size_t namelen;
+    char *fname;
+
+    /* Construct the filename.  */
+    while (name[0] == '/') ++name;
+
+    if (name[0] == '\0') {
+        /* The name "/" is not supported.  */
+        errno = EINVAL;
+        return -1;
+    }
+
+    namelen = strlen(name);
+    fname = (char *) alloca(sizeof("/data/data/com.termux/files/usr/tmp/") - 1 + namelen + 1);
+    memcpy(fname, "/data/data/com.termux/files/usr/tmp/", sizeof("/data/data/com.termux/files/usr/tmp/") - 1);
+    memcpy(fname + sizeof("/data/data/com.termux/files/usr/tmp/") - 1, name, namelen + 1);
+
+    return unlink(fname);
+}
+
+static int shm_open(const char *name, int oflag, mode_t mode) {
+    size_t namelen;
+    char *fname;
+    int fd;
+
+    /* Construct the filename.  */
+    while (name[0] == '/') ++name;
+
+    if (name[0] == '\0') {
+        /* The name "/" is not supported.  */
+        errno = EINVAL;
+        return -1;
+    }
+
+    namelen = strlen(name);
+    fname = (char *) alloca(sizeof("/data/data/com.termux/files/usr/tmp/") - 1 + namelen + 1);
+    memcpy(fname, "/data/data/com.termux/files/usr/tmp/", sizeof("/data/data/com.termux/files/usr/tmp/") - 1);
+    memcpy(fname + sizeof("/data/data/com.termux/files/usr/tmp/") - 1, name, namelen + 1);
+
+    fd = open(fname, oflag, mode);
+    if (fd != -1) {
+        /* We got a descriptor.  Now set the FD_CLOEXEC bit.  */
+        int flags = fcntl(fd, F_GETFD, 0);
+        flags |= FD_CLOEXEC;
+        flags = fcntl(fd, F_SETFD, flags);
+
+        if (flags == -1) {
+            /* Something went wrong.  We cannot return the descriptor.  */
+            int save_errno = errno;
+            close(fd);
+            fd = -1;
+            errno = save_errno;
+        }
+    }
+
+    return fd;
+}
+#endif
+
 /*[clinic input]
 module _posixshmem
 [clinic start generated code]*/
diff --git a/Modules/posixmodule.c b/Modules/posixmodule.c
index b9ca286..75e9720 100644
--- a/Modules/posixmodule.c
+++ b/Modules/posixmodule.c
@@ -286,7 +286,7 @@ corresponding Unix manual entries for more information on calls.");
 #  undef HAVE_SCHED_SETAFFINITY
 #endif
 
-#if defined(HAVE_SYS_XATTR_H) && defined(HAVE_LINUX_LIMITS_H) && !defined(__FreeBSD_kernel__) && !defined(__GNU__)
+#if defined(HAVE_SYS_XATTR_H) && defined(HAVE_LINUX_LIMITS_H) && !defined(__FreeBSD_kernel__) && !defined(__GNU__) && !defined(__ANDROID__)
 #  define USE_XATTRS
 #  include <linux/limits.h>  // Needed for XATTR_SIZE_MAX on musl libc.
 #endif
diff --git a/Modules/socketmodule.c b/Modules/socketmodule.c
index 4ec68e2..b5070d5 100644
--- a/Modules/socketmodule.c
+++ b/Modules/socketmodule.c
@@ -6137,17 +6137,74 @@ otherwise any protocol will match.");
    This only returns the protocol number, since the other info is
    already known or not useful (like the list of aliases). */
 
+#ifdef __ANDROID__
+struct protocol_name_and_number {
+    char* name;
+    int number;
+};
+#endif
+
 /*ARGSUSED*/
 static PyObject *
 socket_getprotobyname(PyObject *self, PyObject *args)
 {
+#ifdef __ANDROID__
+    /* http://git.musl-libc.org/cgit/musl/tree/src/network/proto.c */
+    static const struct protocol_name_and_number protocols[] = {
+       {"ip", 0},
+       {"icmp", 1},
+       {"igmp", 2},
+       {"ggp", 3},
+       {"ipencap", 4},
+       {"st", 5},
+       {"tcp", 6},
+       {"egp", 8},
+       {"pup", 12},
+       {"udp", 17},
+       {"hmp", 20},
+       {"xns-idp", 22},
+       {"iso-tp4", 29},
+       {"xtp", 36},
+       {"ddp", 37},
+       {"idpr-cmtp", 38},
+       {"ipv6", 41},
+       {"ipv6-route", 43},
+       {"ipv6-frag", 44},
+       {"idrp", 45},
+       {"rsvp", 46},
+       {"gre", 47},
+       {"esp", 50},
+       {"ah", 51},
+       {"skip", 57},
+       {"ipv6-icmp", 58},
+       {"ipv6-nonxt", 59},
+       {"ipv6-opts", 60},
+       {"rspf", 73},
+       {"vmtp", 81},
+       {"ospf", 89},
+       {"ipip", 94},
+       {"encap", 98},
+       {"pim", 103},
+       {"raw", 255}
+    };
+    int i;
+#endif
     const char *name;
     struct protoent *sp;
     if (!PyArg_ParseTuple(args, "s:getprotobyname", &name))
         return NULL;
+#ifdef __ANDROID__
+    for (i = 0; i < sizeof(protocols) / sizeof(protocols[0]); i++) {
+        if (strcmp(protocols[i].name, name) == 0) {
+            return PyLong_FromLong((long) protocols[i].number);
+        }
+    }
+    sp = NULL;
+#else
     Py_BEGIN_ALLOW_THREADS
     sp = getprotobyname(name);
     Py_END_ALLOW_THREADS
+#endif
     if (sp == NULL) {
         PyErr_SetString(PyExc_OSError, "protocol not found");
         return NULL;
diff --git a/configure b/configure
index b6f90bc..4588ca2 100755
--- a/configure
+++ b/configure
@@ -6939,6 +6939,8 @@ rm -f conftest.c conftest.out
 { printf "%s\n" "$as_me:${as_lineno-$LINENO}: checking for multiarch" >&5
 printf %s "checking for multiarch... " >&6; }
 case $ac_sys_system in #(
+  Linux-android) :
+    MULTIARCH="" ;; #(
   Darwin*) :
     MULTIARCH="" ;; #(
   FreeBSD*) :
@@ -12838,7 +12840,7 @@ then
 		 then CCSHARED="-fPIC";
 		 else CCSHARED="+z";
 		 fi;;
-	Linux-android*) ;;
+	Linux-android*) CCSHARED="-fPIC";;
 	Linux*|GNU*) CCSHARED="-fPIC";;
 	Emscripten*|WASI*)
 		if test "x$enable_wasm_dynamic_linking" = xyes
@@ -18772,7 +18774,6 @@ printf "%s\n" "$ac_cv_func_link" >&6; }
   if test "x$ac_cv_func_link" = xyes
 then :
 
-printf "%s\n" "#define HAVE_LINK 1" >>confdefs.h
 
 fi
 
